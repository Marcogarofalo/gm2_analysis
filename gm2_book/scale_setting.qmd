# scale setting

no bounding has been applied

```{r ,include=FALSE}
library(Rose)
library(ggplot2)
library(plotly)
library(knitr)
# library(hadron)
# library(kableExtra) # breaks latex
# library(tidyverse)

df <- data.frame(x = 1:5, y = 1:5)
f1 <- function(df) {
  gg <- ggplot(df, aes(x, y)) +
    geom_point()
  assign("ggp", plotly::ggplotly(gg), envir = parent.frame())
  # ggp
  df # NOT returning a plot
}
res1 <- f1(df)
ggp # Let knit handle the plot
myplotly(ggplot())
# widgetframe::frameableWidget(ggplotly(ggp)%>%config(mathjax = "cdn") )
```
$$
f_\pi^j(\xi, \infty) =\frac{f_\pi^j(\xi, L) }{1-\Delta_{FVE}}
$$
$$
 \Delta_{FVE} = - 2 \xi_\ell ~ \widetilde{g}_1(\lambda) \\
  \widetilde{g}_1(\lambda) \simeq 4 \sqrt{\frac{\pi}{2}} \sum_{n=1}^\infty \frac{m(n)}{(\sqrt{n} \lambda)^{3/2}} e^{- \sqrt{n} \lambda} \\
   \xi_\pi \equiv \frac{M_\pi^2}{(4 \pi f_\pi)^2}
$$
with $m(n)$ the multiplicities of a three-dimensional vector $\vec{n}$ having integer norm $n$ (i.e.~$m(n) = \{6, 12, 8, 6, ...\}$).
To obtain the above formula we expand $K_1$, the Bessel function of the second kind, by its asymptotic expansion.\
Different choices of the expansion variable are possible: one can replace $f_\pi$ with the LO LEC $f$ and/or replace $M_\pi^2$ with $2 B m_\ell$ (and correspondingly $M_\pi L$ with $\sqrt{2 B m_\ell} L$ in the arguments of the functions $\widetilde{g}_1$ and $ \widetilde{g}_2$). 
At NLO (i.e., for the GL formula) the above changes are equivalent, since any difference represents a NNLO effect.

$$
af_\pi^j(\xi) = af_\pi^j(\xi^{phys}) \left\{1-2\xi\log(\xi/\xi)+ [P+P_{disc} (af_\pi^j(\xi^{phys}))^2] (\xi-\xi^{phys})\right\} 
$$


$$
P[0]=a(A) \text{fm}\\
P[1]=a(B) \text{fm}\\
P[2]=a(C) \text{fm}\\
P[3]=a(D) \text{fm}\\
P[4]=a(E) \text{fm}
$$

```{r, echo=FALSE, results='asis', dev='tikz', warning=FALSE}
plot_fit <- function(basename, var, data_type = NULL, gg = NULL, noribbon = FALSE,
                     id_x = 1,
                     noline = FALSE,
                     labelfit = "fit", width = 0.02, size = 1,
                     id_color = NULL, id_shape = NULL,
                     single_name_for_fit = NULL,
                     nolabel_for_fit = FALSE,
                     nudge = 0) {
  filed <- paste0(basename, "_fit_data.txt")
  df <- read.table(filed, header = FALSE, fill = TRUE)

  if (is.null(gg)) gg <- myggplot()
  idy <- ncol(df) - 2

  if (is.null(id_color)) {
    color_type <- as.factor(df[, idy + 2])
  } else {
    color_type <- as.factor(df[, id_color])
  }

  if (is.null(id_shape)) {
    shape_type <- as.factor(df[, idy + 2])
  } else {
    shape_type <- as.factor(df[, id_shape])
  }

  lastr <- nrow(df)
  Nfits <- c(df[1, idy + 2]:df[lastr, idy + 2])
  if (!is.null(data_type)) {
    if (length(data_type) == 1) {
      color_type <- data_type
      shape_type <- data_type
    } else {
      N <- length(which(df[, idy + 2] == 0))

      # color_type <- rep(data_type, each = N)
      # shape_type <- rep(data_type, each = N)

      color_type <- df[, idy + 2]
      shape_type <- df[, idy + 2]

      count <- 1
      for (n in c(1:length(df[, idy + 2]))) {
        if (n != 1) {
          if (df[n, idy + 2] != df[n - 1, idy + 2]) {
            count <- count + 1
          }
        }
        color_type[n] <- data_type[count]
        shape_type[n] <- data_type[count]
      }
    }
  }
  gg <- gg + geom_point(
    data = df,
    mapping = aes(
      x = df[, id_x] + nudge, y = df[, idy],
      color = color_type,
      shape = shape_type,
      fill = color_type
    ),
    size = size
  )

  gg <- gg + geom_errorbar(
    data = df,
    mapping = aes(
      x = df[, id_x] + nudge, y = df[, idy],
      ymin = df[, idy] - df[, idy + 1],
      ymax = df[, idy] + df[, idy + 1],
      color = color_type,
      shape = shape_type,
      fill = color_type
    ),
    width = width, size = size
  )


  datalist <- list()
  mycol <- unique(paste0(labelfit, color_type))
  if (!is.null(data_type)) {
    mycol <- Nfits
    count <- 1
    mycol[1] <- paste0(labelfit, data_type[1])
    for (n in c(1:length(df[, idy + 2]))) {
      if (n != 1) {
        if (df[n, idy + 2] != df[n - 1, idy + 2]) {
          count <- count + 1
          mycol[count] <- paste0(labelfit, data_type[count])
        }
      }
    }
  }
  if (length(mycol) != length(Nfits)) {
    print(mycol)
    print(Nfits)
    mycol <- paste0(labelfit, Nfits)
  }

  if (!is.null(single_name_for_fit)) {
    mycol <- rep(single_name_for_fit, length(Nfits))
  }

  if (nolabel_for_fit) {
    mycol <- unique(paste0(color_type))
    if (length(mycol) != length(Nfits)) {
      mycol <- rep(color_type, length(Nfits))
    }
  }

  if ((!noribbon) | (!noline)) {
    for (n in Nfits) {
      file <- sprintf("%s_fit_out_n%d_%s.txt", basename, n, var)
      # browser()
      n1 <- n + 1
      datalist[[n1]] <- read.table(file,
        header = FALSE, fill = TRUE,
        col.names = c(paste0("x", n), paste0("fit", n), paste0("fiterr", n))
      )
      if (!noribbon) {
        gg <- gg + geom_ribbon(
          mapping = aes_string(
            x = datalist[[n1]][, 1] + nudge,
            ymin = datalist[[n1]][, 2] - datalist[[n1]][, 3],
            ymax = datalist[[n1]][, 2] + datalist[[n1]][, 3],
            fill = as.factor(mycol[n1]),
            color = as.factor(mycol[n1]),
            shape = as.factor(mycol[n1])
          ),
          alpha = 0.5
        )
      }
      if (!noline) {
        gg <- gg + geom_line(
          mapping = aes_string(
            x = datalist[[n1]][, 1] + nudge,
            y = datalist[[n1]][, 2],
            fill = as.factor(mycol[n1]),
            color = as.factor(mycol[n1]),
            shape = as.factor(mycol[n1])
          )
        )
      }
    }
  }
  return(gg)
}

dir <- "/home/garofalo/analysis/g-2_new_stat/fit_all/"
namefit <- paste0(dir, "afpi_cov")
file <- paste0(namefit, "_fit_P.dat")
fit <- read_fit_P_file(file)
cat("\n\n")
dt <- make_table_fit_result(fit)
print(dt)
gg <- myggplot(repeat_color = 1)
gg <- plot_fit(
  basename = namefit,
  var = "xi",
  id_x = 5,
  data_type = c("A", "B", "C", "D", "E", "B", "C", "D"),
  width = 1e-4,
  gg = gg, ,
  labelfit = "",
  # , single_name_for_fit = "fit"
  # , nolabel_for_fit = TRUE
  , noline = TRUE
)
gg <- gg + geom_vline(xintercept = 0.00678723)
fig <- myplotly(gg, "", "$\\xi$", "$af_\\pi$", to_print = TRUE)
```

## scaling with tau paper

```{r, echo=FALSE, results='asis', dev='tikz', warning=FALSE}
a_tau <- c(0.0908026, 0.07951, 0.06816, 0.05688, 0.04891)
da_tau <- c(0.000535517, 0.00004, 0.00008, 0.00006, 0.00006)
gg <- myggplot()

diff <- (a_tau - fit$P[c(1:5), 2])
gg <- gg + geom_pointrange(aes(
  x = a_tau^2, y = diff,
  ymin = diff - da_tau,
  ymax = diff + da_tau,
  color = "tau-MG",
  shape = "tau-MG",
  fill = "tau-MG"
))


fig <- myplotly(gg, "", "$a^2$", "$a(\\tau)-a(MG)$", to_print = TRUE, xrange = c(0, 0.0085))
```


## Extra FVE

here we add an residual volume dependece
$$
a f_\pi(L)=a f_\pi(L=\infty)\left\{\ 1+P_{FVE}\xi \frac{e^{M_\pi L}}{(M_\pi L)^{3/2}} \right\}
$$


```{r, echo=FALSE, results='asis', dev='tikz', warning=FALSE}

dir <- "/home/garofalo/analysis/g-2_new_stat/fit_all/"
namefit <- paste0(dir, "afpi_resFVE_cov")
file <- paste0(namefit, "_fit_P.dat")
fit <- read_fit_P_file(file)
cat("\n\n")
dt <- make_table_fit_result(fit)
print(dt)
gg <- myggplot(repeat_color = 1)
gg <- plot_fit(
  basename = namefit,
  var = "xi",
  id_x = 5,
  data_type = c("A", "B", "C", "D", "E", "B", "C", "D"),
  width = 1e-4,
  gg = gg, ,
  labelfit = "",
  # , single_name_for_fit = "fit"
  # , nolabel_for_fit = TRUE
  , noline = TRUE
)
gg <- gg + geom_vline(xintercept = 0.00678723)
fig <- myplotly(gg, "", "$\\xi$", "$af_\\pi$", to_print = TRUE)
```



```{r, echo=FALSE, results='asis', dev='tikz', warning=FALSE}
a_tau <- c(0.0908026, 0.07951, 0.06816, 0.05688, 0.04891)
da_tau <- c(0.000535517, 0.00004, 0.00008, 0.00006, 0.00006)
gg <- myggplot()

diff <- (a_tau - fit$P[c(1:5), 2])
gg <- gg + geom_pointrange(aes(
  x = a_tau^2, y = diff,
  ymin = diff - da_tau,
  ymax = diff + da_tau,
  color = "tau-MG",
  shape = "tau-MG",
  fill = "tau-MG"
))


fig <- myplotly(gg, "", "$a^2$", "$a(\\tau)-a(MG)$", to_print = TRUE, xrange = c(0, 0.0085))
```
